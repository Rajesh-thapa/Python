

import streamlit as st
import pandas as pd
import numpy as np
import pickle

# Load the trained model
model = pickle.load(open('model.pkl', 'rb'))

st.set_page_config(
    page_title="AeroReach Ticket Purchase Prediction",
    page_icon="üéüÔ∏è",
    layout="wide",
    initial_sidebar_state="expanded"
)

st.title("AeroReach Ticket Purchase Prediction üéüÔ∏è")
st.subheader("Predict the likelihood of a user purchasing a ticket based on their engagement metrics.")

with st.sidebar:
    st.header("About This App")
    st.write("""
        This application predicts the likelihood of a user purchasing a ticket based on various input features.
        Please fill out the form to get a prediction.
    """)

# Custom CSS for styling
st.markdown(
    """
    <style>
    .stButton>button {
        background-color: #4CAF50;
        color: white;
        font-size: 16px;
        border-radius: 5px;
        padding: 10px 20px;
    }
    .stButton>button:hover {
        background-color: #45a049;
    }
    </style>
    """,
    unsafe_allow_html=True
)

# Create a form for user input
with st.form("prediction_form"):
    col1, col2 = st.columns([2, 1])

    with col1:
        preferred_device = st.selectbox("Preferred Device", [9, 8], help="Select the device you prefer to use.")
        preferred_location_type = st.selectbox("Preferred Location Type", [0, 1, 2], help="Choose your preferred travel location type.")
        following_company_page = st.selectbox("Following Company Page", [0, 1], help="Indicate if you're following the company page.")
        working_flag = st.selectbox("Working Flag", [0, 1], help="Specify your employment status.")
        Adult_flag = st.selectbox("Adult Flag", [0, 1], help="Select if you're an adult.")
        Yearly_avg_view_on_travel_page = st.number_input("Yearly Avg Views on Travel Page", min_value=0.0, help="Enter the average yearly views on travel pages.")
        total_likes_on_outstation_checkin_given = st.number_input("Total Likes on Outstation Checkin Given", min_value=0.0, help="Enter the total likes given on outstation check-ins.")
        yearly_avg_Outstation_checkins = st.number_input("Yearly Avg Outstation Checkins", min_value=0.0, help="Enter the average number of outstation check-ins per year.")
        member_in_family = st.number_input("Member in Family", min_value=0, help="Enter the number of family members.")
        Yearly_avg_comment_on_travel_page = st.number_input("Yearly Avg Comment on Travel Page", min_value=0.0, help="Enter the average yearly comments on travel pages.")
        total_likes_on_outofstation_checkin_received = st.number_input("Total Likes on Outstation Checkin Received", min_value=0, help="Enter the total likes received on outstation check-ins.")
        week_since_last_outstation_checkin = st.number_input("Weeks Since Last Outstation Checkin", min_value=0, help="Enter the number of weeks since the last outstation check-in.")
        montly_avg_comment_on_company_page = st.number_input("Monthly Avg Comment on Company Page", min_value=0, help="Enter the average monthly comments on the company page.")
        travelling_network_rating = st.number_input("Travelling Network Rating", min_value=0, help="Enter your travelling network rating.")
        Daily_Avg_mins_spend_on_traveling_page = st.number_input("Daily Avg Mins on Traveling Page", min_value=0, help="Enter the average daily minutes spent on the traveling page.")

    # Submit button
    submitted = st.form_submit_button("Predict")

# Process the prediction after form submission
if submitted:
    # Combine inputs into a DataFrame
    input_data = pd.DataFrame([[
        Yearly_avg_view_on_travel_page,
        preferred_device,
        total_likes_on_outstation_checkin_given,
        yearly_avg_Outstation_checkins,
        member_in_family,
        preferred_location_type,
        Yearly_avg_comment_on_travel_page,
        total_likes_on_outofstation_checkin_received,
        week_since_last_outstation_checkin,
        following_company_page,
        montly_avg_comment_on_company_page,
        working_flag,
        travelling_network_rating,
        Adult_flag,
        Daily_Avg_mins_spend_on_traveling_page
    ]], columns=[
        'Yearly_avg_view_on_travel_page',
        'preferred_device',
        'total_likes_on_outstation_checkin_given',
        'yearly_avg_Outstation_checkins',
        'member_in_family',
        'preferred_location_type',
        'Yearly_avg_comment_on_travel_page',
        'total_likes_on_outofstation_checkin_received',
        'week_since_last_outstation_checkin',
        'following_company_page',
        'montly_avg_comment_on_company_page',
        'working_flag',
        'travelling_network_rating',
        'Adult_flag',
        'Daily_Avg_mins_spend_on_traveling_page'
    ])

    # Make prediction
    prediction = model.predict(input_data)[0]

    # Display the result
    if prediction == 1:
        st.success("‚úÖ User is likely to purchase a ticket!")
    else:
        st.error("‚ùå User is unlikely to purchase a ticket.")

